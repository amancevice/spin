#!/bin/bash

set -eo pipefail

# Internal settings
_SPIN_EXIT_CODE=0                  # Exit code holder
_SPIN_SPINNER_CHARS=(⠏ ⠛ ⠹ ⠼ ⠶ ⠧)  # Spinner characters
_SPIN_SPINNER_CURSOR=0             # Cursor for _SPIN_SPINNER_CHARS
_SPIN_STREAM_SLEEP=0.05            # Time to sleep between lines
_SPIN_SCREEN="$(mktemp)"           # Tempfile for screen
_SPIN_CLEAN="$(mktemp)"            # Tempfile for clean
_SPIN_STDOUT="$(mktemp)"           # Tempfile for stdout
_SPIN_STDERR="$(mktemp)"           # Tempfile for stderr
_SPIN_VERSION=v0.1.5               # Spin version

# Colors
SPIN_COLOR=${SPIN_COLOR:-true}
SPIN_COLOR_LOGS=${SPIN_COLOR_LOGS:-240}
SPIN_COLOR_SPINNER=${SPIN_COLOR_SPINNER:-209}
SPIN_COLOR_TITLE=${SPIN_COLOR_TITLE:-69}

# Flags
SPIN_FOREGROUND=${SPIN_FOREGROUND:-false}
SPIN_SHOW_OUTPUT=${SPIN_SHOW_OUTPUT:-false}

# Options
SPIN_CHAR_FINISH="${SPIN_CHAR_ERROR:-⠿}"
SPIN_CHAR_ERROR="${SPIN_CHAR_ERROR:-✘}"
SPIN_CHAR_SUCCESS="${SPIN_CHAR_SUCCESS:-✔}"
SPIN_COMMAND="${SPIN_COMMAND}"
SPIN_LINES="${SPIN_LINES:-5}"
SPIN_TIMEOUT="${SPIN_TIMEOUT:-0}"
SPIN_TITLE="${SPIN_TITLE}"

cleanup() {
	# Clear screen
	print_cleanup

	# Show dead spinner
	$SPIN_FOREGROUND || print_spinner_dead

	# Reset word wrap
	tput smam

	case $_SPIN_EXIT_CODE in
		# OK
		0) ;;
		# Usage error
		2) print_help ;;
		# General error
		*) print_stream ;;
	esac

	# Ensure terminal is reset
	tput sgr0
}

execute_background() {
	# Turn off word-wrapping
	tput rmam

	# Start command in background & capture PID
	if $SPIN_SHOW_OUTPUT ; then
		timeout $SPIN_TIMEOUT $SHELL -c "${SPIN_COMMAND[@]}" 1> "$_SPIN_STDOUT" 2> "$_SPIN_STDERR" &
	else
		timeout $SPIN_TIMEOUT $SHELL -c "${SPIN_COMMAND[@]}" &> "$_SPIN_STDERR" &
	fi
	_SPIN_PID=$!

	# Spin!
	while true ; do
		# Prepare lines to erase
		print_cleanup > "$_SPIN_CLEAN"

		# Prepare lines to print
		print_spinner > "$_SPIN_SCREEN"
		print_stream >> "$_SPIN_SCREEN"

		# Erase screen and redraw
		cat "$_SPIN_CLEAN" "$_SPIN_SCREEN"

		# Sleep or return
		if ps -p $_SPIN_PID &> /dev/null ; then
			sleep $_SPIN_STREAM_SLEEP
		elif wait $_SPIN_PID ; then
			return
		else
			return $?
		fi
	done
}

execute_foreground() {
	print_spinner_dead >&2
	timeout $SPIN_TIMEOUT $SHELL -c "${SPIN_COMMAND[@]}"
}

print_cleanup() {
	# Print escape characters to clear printed lines
	while IFS= read -r line ; do
		printf '\e[A\e[K' ;
	done < "$_SPIN_SCREEN"
}

print_help() {
	cat <<-HELP
		Usage:
		  spin [OPTIONS] -- [COMMAND]

		Options:
		  -h, --help             Show this message
		  -f, --foreground       Run command in foreground
		  -n, --lines LINES      Lines to print before scrolling (default: $SPIN_LINES)
		  -o, --show-output      Show stdout contents on command completion
		  -T, --timeout SECONDS  Kill process after N seconds (default: $SPIN_TIMEOUT)
		  -t, --title TITLE      Spinner title text
		  -v, --version          Show version
		  --char-error CHAR      Spinner character on error (default: $SPIN_CHAR_ERROR)
		  --char-success CHAR    Spinner character on success (default: $SPIN_CHAR_SUCCESS)
		  --color-logs COLOR     ANSI color of log stream (default: $SPIN_COLOR_LOGS)
		  --color-spinner COLOR  ANSI color of spinner (default: $SPIN_COLOR_SPINNER)
		  --color-title COLOR    ANSI color of title (default: $SPIN_COLOR_TITLE)
	HELP
}

print_spinner() {
	# Increment spinner character
	_SPIN_SPINNER_CURSOR=$(expr $_SPIN_SPINNER_CURSOR % 5 + 1)

	# Print spinner + title
	tput setaf $SPIN_COLOR_SPINNER
	printf '%s ' "${_SPIN_SPINNER_CHARS[$_SPIN_SPINNER_CURSOR]}"
	tput setaf $SPIN_COLOR_TITLE
	printf '%s\n' "$SPIN_TITLE"
	tput sgr0
}

print_spinner_dead() {
	# Print spinner + title
	tput setaf $SPIN_COLOR_LOGS
	if $SPIN_FOREGROUND ; then
		printf '%s\n' "$SPIN_CHAR_FINISH $SPIN_TITLE"
	elif [ $_SPIN_EXIT_CODE -eq 0 ] ; then
		printf '%s\n' "$SPIN_CHAR_SUCCESS $SPIN_TITLE"
	else
		printf '%s\n' "$SPIN_CHAR_ERROR $SPIN_TITLE"
	fi
	tput sgr0
}

print_stream() {
	# Print log lines
	tput setaf $SPIN_COLOR_LOGS
	while IFS= read -r line ; do
		printf '%s\n' "$line"
	done < <(tail -n $SPIN_LINES "$_SPIN_STDERR")
	tput sgr0
}

print_version() {
	echo "spin $_SPIN_VERSION"
}

tput() {
	case "$TERM" in
		'' | dumb) ;;
		*)
			case "$1" in
				setaf | sgr0) ! $SPIN_COLOR || command tput "$@" ;;
				*) command tput "$@" ;;
			esac
	esac
}

trap_exit() {
	_SPIN_EXIT_CODE=$?

	# Clean up stderr
	$SPIN_FOREGROUND || cleanup >&2

	# Show stdout
	$SPIN_FOREGROUND || ! $SPIN_SHOW_OUTPUT || cat "$_SPIN_STDOUT"

	# Clean up tempfiles
	rm -f "$_SPIN_SCREEN" "$_SPIN_CLEAN" "$_SPIN_STDOUT" "$_SPIN_STDERR"

	return $_SPIN_EXIT_CODE
}

main() {
	while (( $# )) ; do
		case "$1" in
			-h | --help)        shift ; print_help             ; return   ;;
			-f | --foreground)  shift ; SPIN_FOREGROUND=true              ;;
			-n | --lines)       shift ; SPIN_LINES=$1          ; shift    ;;
			-C | --no-color)    shift ; SPIN_COLOR=false                  ;;
			-o | --show-output) shift ; SPIN_SHOW_OUTPUT=true             ;;
			-T | --timeout)     shift ; SPIN_TIMEOUT=$1        ; shift    ;;
			-t | --title)       shift ; SPIN_TITLE="$1"        ; shift    ;;
			-v | --version)     shift ; print_version          ; return   ;;
			--char-error)       shift ; SPIN_CHAR_ERROR="$1"   ; shift    ;;
			--char-success)     shift ; SPIN_CHAR_SUCCESS="$1" ; shift    ;;
			--color-logs)       shift ; SPIN_COLOR_LOGS=$1     ; shift    ;;
			--color-spinner)    shift ; SPIN_COLOR_SPINNER=$1  ; shift    ;;
			--color-title)      shift ; SPIN_COLOR_TITLE=$1    ; shift    ;;
			--)                 shift ; SPIN_COMMAND="$@"      ; break    ;;
			-*)                 shift ; print_help             ; return 2 ;;
			*)                  SPIN_COMMAND="$@"              ; break    ;;
		esac
	done

	trap trap_exit EXIT

	# Set default title
	if [ -z "$SPIN_TITLE" ] ; then
		SPIN_TITLE="${SPIN_COMMAND[*]}"
	fi

	if $SPIN_FOREGROUND ; then
		execute_foreground
	else
		execute_background >&2
	fi
}

main "$@"
