#!/bin/bash

set -eo pipefail

# Internal settings
_SPIN_LINES_PRINTED=0               # Count lines printed to screen
_SPIN_EXIT_CODE=0                   # Exit code holder
_SPIN_SPINNER_CHARS=(⠏ ⠛ ⠹ ⠼ ⠶ ⠧)  # Spinner character
_SPIN_SPINNER_CURSOR=0              # Cursor for _SPIN_SPINNER_CHARS
_SPIN_STREAM=false                  # Stream/async flag
_SPIN_STREAM_SLEEP=0.05             # Time to sleep between lines
_SPIN_TEMPFILE="$(mktemp)"          # Tempfile for logs
_SPIN_TEMPFILE_STDOUT="$(mktemp)"   # Tempfile for stdout
_SPIN_VERSION=v0.1.3                # Spin version

# Colors
SPIN_COLOR=true
SPIN_COLOR_LOGS=${SPIN_COLOR_LOGS:-240}
SPIN_COLOR_SPINNER=${SPIN_COLOR_SPINNER:-209}
SPIN_COLOR_TITLE=${SPIN_COLOR_TITLE:-69}

# Flags
SPIN_FOREGROUND=${SPIN_FOREGROUND:-false}
SPIN_SHOW_OUTPUT=${SPIN_SHOW_OUTPUT:-false}

# Options
SPIN_COMMAND="${SPIN_COMMAND}"
SPIN_LINES="${SPIN_LINES:-5}"
SPIN_TIMEOUT="${SPIN_TIMEOUT:-0}"
SPIN_TITLE="${SPIN_TITLE}"

cleanup() {
	# Clear screen
	erase_lines

	# Show dead spinner
	$SPIN_FOREGROUND || print_spinner_dead

	case $_SPIN_EXIT_CODE in
		# OK
		0) ;;
		# Usage error
		2) print_help ;;
		# General error
		*) print_stream ;;
	esac

	# Ensure terminal is reset
	tput sgr0
	tput smam
}

erase_lines() {
	if [ $_SPIN_LINES_PRINTED -gt 0 ] ; then
		for pc in $(seq 1 $_SPIN_LINES_PRINTED); do
			printf '\e[A\e[K'
		done
		_SPIN_LINES_PRINTED=0
	fi
}

execute_background() {
	# Turn off word-wrapping
	tput rmam

	# Start command in background & capture PID
	if $SPIN_SHOW_OUTPUT ; then
		timeout $SPIN_TIMEOUT "$SPIN_COMMAND" 1> "$_SPIN_TEMPFILE_STDOUT" 2> "$_SPIN_TEMPFILE" &
	else
		timeout $SPIN_TIMEOUT "$SPIN_COMMAND" &> "$_SPIN_TEMPFILE" &
	fi
	_SPIN_PID=$!

	# Spin!
	while true ; do
		# Erase anything printed
		erase_lines

		# Print spinner + logs
		print_spinner
		print_stream

		# Sleep or return
		if ps -p $_SPIN_PID &> /dev/null ; then
			sleep $_SPIN_STREAM_SLEEP
		elif wait $_SPIN_PID ; then
			return
		else
			return $?
		fi
	done
}

execute_foreground() {
	print_spinner_dead >&2
	eval "$SPIN_COMMAND"
}

print_help() {
	cat <<-HELP
		Usage:
		  spin [OPTIONS] -- [COMMAND]

		Options:
		  -h, --help             Show this message
		  -f, --foreground       Run command in foreground
		  -n, --lines LINES      Lines to print before scrolling (default: 5)
		  -o, --show-output      Show stdout contents on command completion
		  -T, --timeout SECONDS  Kill process after N seconds
		  -t, --title TITLE      Spinner title text
		  -v, --version          Show version
		  --color-logs COLOR     ANSI color of log stream (default: 240)
		  --color-spinner COLOR  ANSI color of spinner (default: 209)
		  --color-title COLOR    ANSI color of title (default: 69)
	HELP
}

print_spinner() {
	# Increment spinner character
	_SPIN_SPINNER_CURSOR=$(expr $_SPIN_SPINNER_CURSOR % 5 + 1)

	# Print spinner + title
	tput setaf $SPIN_COLOR_SPINNER
	printf '%s ' "${_SPIN_SPINNER_CHARS[$_SPIN_SPINNER_CURSOR]}"
	tput setaf $SPIN_COLOR_TITLE
	printf '%s\n' "$SPIN_TITLE"
	tput sgr0

	# Increment lines printed to screen
	_SPIN_LINES_PRINTED=$(expr $_SPIN_LINES_PRINTED + 1)
}

print_spinner_dead() {
	# Print spinner + title
	tput setaf $SPIN_COLOR_LOGS
	printf '%s\n' "⠿ $SPIN_TITLE"
	tput sgr0
}

print_stream() {
	# Print log lines
	tput setaf $SPIN_COLOR_LOGS
	while IFS= read -r line ; do
		printf '%s\n' "$line"
		_SPIN_LINES_PRINTED=$(expr $_SPIN_LINES_PRINTED + 1)
	done < <(tail -n $SPIN_LINES $_SPIN_TEMPFILE)
	tput sgr0
}

print_version() {
	echo "spin $_SPIN_VERSION"
}

tput() {
	case "$TERM" in
		'' | dumb) ;;
		*)
			case "$1" in
				setaf | sgr0) ! $SPIN_COLOR || command tput "$@" ;;
				*) command tput "$@" ;;
			esac
	esac
}

trap_exit() {
	_SPIN_EXIT_CODE=$?

	# Clean up stderr
	cleanup >&2

	# Show stdout
	$SPIN_FOREGROUND || ! $SPIN_SHOW_OUTPUT || cat "$_SPIN_TEMPFILE_STDOUT"

	# Clean up tempfiles
	rm -f "$_SPIN_TEMPFILE" "$_SPIN_TEMPFILE_STDOUT"

	return $_SPIN_EXIT_CODE
}

main() {
	while (( $# )) ; do
		case "$1" in
			-h | --help)        shift ; print_help            ; return ;;
			-f | --foreground)  shift ; SPIN_FOREGROUND=true           ;;
			-n | --lines)       shift ; SPIN_LINES=$1         ; shift  ;;
			-C | --no-color)    shift ; SPIN_COLOR=false               ;;
			-o | --show-output) shift ; SPIN_SHOW_OUTPUT=true          ;;
			-T | --timeout)     shift ; SPIN_TIMEOUT=$1       ; shift  ;;
			-t | --title)       shift ; SPIN_TITLE="$1"       ; shift  ;;
			-v | --version)     shift ; print_version         ; return ;;
			--color-logs)       shift ; SPIN_COLOR_LOGS=$1    ; shift  ;;
			--color-spinner)    shift ; SPIN_COLOR_SPINNER=$1 ; shift  ;;
			--color-title)      shift ; SPIN_COLOR_TITLE=$1   ; shift  ;;
			--)                 shift ; SPIN_COMMAND="$*"     ; break  ;;
			-*)                 return 2                               ;;
			*)                  SPIN_COMMAND="$*"             ; break  ;;
		esac
	done

	# Set default title
	if [ -z "$SPIN_TITLE" ] ; then
		SPIN_TITLE="$SPIN_COMMAND"
	fi

	if $SPIN_FOREGROUND ; then
		execute_foreground
	else
		execute_background >&2
	fi
}

trap trap_exit EXIT
main "$@"
